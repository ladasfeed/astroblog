---
import { PostCard } from "@components/react/PostCard/PostCard";
import { Tag } from "@components/react/Tag";
import { CATEGORIES } from "@consts";
import BaseLayout from "@layouts/BaseLayout.astro";
import { normalizePosts } from "@lib/postsHelpers";
import { getCollection, getEntry } from "astro:content";
import i18next, { t, changeLanguage } from "i18next";
import { getRouter } from "src/routes";

changeLanguage("en");

const postsRaw = normalizePosts(await getCollection("posts"));
const postsForFirstSection = postsRaw.slice(0, 3);
const postsForPostsListSection = postsRaw.slice(3, 9);
export const prerender = true;
const tags = (await getEntry("tags", "tags"));

const router = getRouter(i18next.language);
---

<!doctype html>
<BaseLayout pageTitle="base64" pageDescription="Awsome blog">
  <main class="page">
    <section
      class="section-1-container section-container"
    >
      <div class="left">
        <div class="quote">
          <span class="text-accent z-[1] relative">BE BASED</span>
          <span class="text-black relative z-0 top-[-0.4em]">NOT BASIC</span>
        </div>
        <div class="animation-wrapper">
          <div class="cube">
            <a class="cube__side">CSS</a>
            <a class="cube__side">TS</a>
            <a class="cube__side">REACT</a>
            <a class="cube__side">FEATURES</a>
            <div class="cube__side"></div>
            <div class="cube__side"></div>
          </div>
        </div>
      </div>
      <div class="right">
        {postsForFirstSection.map((post) => <PostCard {...post} />)}
      </div>
    </section>

    <section class="section-container categories">
      <h2 class="text-end">{t("categories")}</h2>
      <div class="categories__list">
        {
          tags.data.map((item) => {
            return <a href={`${router.blog.root}?tag=${item}`}><Tag>{item}</Tag></a>
          })
        }
      </div>
    </section>

    <section class="section-container recommend">
      <h2 class="text-start">I WOULD RECOMMEND</h2>
      <div class="recommend-list">
        {
          postsForPostsListSection.map((item) => {
            return <PostCard view="large" {...item} />;
          })
        }
      </div>
    </section>
  </main>
</BaseLayout>

<style lang="scss">
  @import '../stylesV2/mixins.scss';

  .page {
    display: flex;
    flex-direction: column;
    gap: 60px;

    @include bpMobile {
      gap: 24px;
    }
  }

  .section-1-container {
    display: flex;
    justify-content: center;
    gap: 120px;
    padding-top: 64px;
    padding-bottom: 64px;

    @include bpDesktopSM {
      gap: 60px;
    }

    @include bpMobile {
      flex-direction: column;
      justify-content: flex-start;
      align-items: center;
      padding-top: 24px;
      padding-bottom: 24px;
    }
  }

  .quote {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    font-weight: 900;
    font-size: 92px;
    font-family: theme('fontFamily.secondary');

    @include bpDesktopSM {
      font-size: 76px;
    }

    @include bpMobile {
      align-items: center;
      font-size: 48px;
    }
  }

  .left {
    flex-shrink: 0;
  }

  .animation-wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 24px;

    @include bpDesktopSM {
      transform: scale(0.8)
    }

    @include bpMobile {
      margin-top: calc(-20% + 24px);
      margin-bottom: calc(-20% + 24px);
      transform: scale(0.6);
    }
  }

  .cube {
    --size: 200px;

    margin-right: 50px;
    margin-left: 50px;
    width: var(--size);
    height: var(--size);
    transform-style: preserve-3d;
    animation: intro 5s forwards infinite;
    perspective: 500px;
  }

  .cube__side {
    position: absolute;
    display: grid;
    width: 100%;
    height: 100%;
    box-shadow: 0 0 10px 5px inset;
    background: rgb(255 255 255 / 40%);
    backface-visibility: hidden;
    color: var(--color-accent);
    font-weight: bold;
    font-size: 32px;
    transform-origin: center center calc(-1 * (var(--size) / 2));
    transition: 0.3s background;
    place-items: center;
    cursor: pointer;
  }

  .cube__side:hover {
    background: rgb(0 0 0 / 80%);
  }

  .cube__side:nth-child(2n) {
    /* backdrop-filter: blur(2px); */
  }

  .right {
    display: flex;
    flex-direction: column;
    gap: 16px;

    @include bpMobile {
      width: 100%;
    }
  }

  /* section 2 */

  /* global */
  h2 {
    color: var(--color-accent);
    font-weight: 900;
    font-size: 64px;
    font-family: var(--font-secondary);

    @include bpMobile {
      font-size: 32px;
    }
  }

  .categories {
    padding-bottom: 60px;
  }

  .categories__list {
    display: flex;
    flex-wrap: wrap;
    gap: 24px;
    margin-top: 24px;

    @include bpMobile {
      gap: 12px;
    }
  }

  .categories__list-item {
    padding: 8px 16px;
    box-shadow: 0 0 4px 4px rgba(0 0 0 / 25%);

    /* font-family: theme(fontFamily.secondary); */
    background-color: white;
    // color: thasdasasdasasdeme(colors.dark);
    text-transform: uppercase;
    font-weight: bold;
    font-size: 24px;
    letter-spacing: 2px;
    cursor: pointer;

    @include bpMobile {
      padding: 8px;
      font-size: 16px;
    }
  }

  /* Section 3 */
  .recommend-list {
    display: flex;
    flex-direction: column;
    gap: 24px;
    margin-top: 24px;

    @include bpMobile {
      gap: 12px;
    }
  }

  /* Dark mode */
  :global(.dark) .cube__side {
    background: theme('colors.dark_darker');
  }

  :global(.dark) .cube__side:hover {
    background: var(--color-white);
  }

  :global(.dark) .categories__list-item {
    box-shadow: 0 0 4px 2px rgba(255 255 255 / 25%);
    background-color: theme('colors.blue-dark');
    color: theme('colors.white');
  }
</style>

<script is:inline>
  {
    let sides = document.querySelectorAll(".cube__side");
    let container = document.querySelector(".cube");

    let speed = 0.5;
    let delta = { x: 0, y: 0 };

    const updateRotation = ({ x, y }) => {
      sides.forEach((item, index) => {
        if (index < 4) {
          item.style.transform = `rotateX(${x}deg) rotateY(${index * 90 + y}deg) `;
        } else if (index == 4) {
          item.style.transform = `rotateX(${90 + x}deg) rotateZ(${-y}deg) `;
        } else if (index == 5) {
          item.style.transform = `rotateX(${270 + x}deg) rotateZ(${y}deg)  `;
        }
      });
    };

    container.addEventListener("mouseover", () => {
      speed = 0.3;
    });
    container.addEventListener("mouseout", () => {
      speed = 0.5;
    });

    const rotate = ({ x, y }) => {
      if (x) delta.x += x;
      if (y) delta.y += y;
      updateRotation(delta);
    };

    rotate({ x: -15 });
    intervalId = window.setInterval(() => {
      window.requestAnimationFrame(() => {
        rotate({ y: speed });
      });
    }, 16);

    updateRotation(delta);
  }
</script>

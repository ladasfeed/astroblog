---
import HeaderLink from "./HeaderLink.astro";
import { SITE_TITLE } from "../consts";
import ThemeIcon from "./ThemeIcon.astro";
import LanguageSwitcher from "./LanguageSwitcher.astro";
import BackButton from "@assets/icons/back.svg?raw";
import { getRouter } from "src/routes";
import i18n from "i18next";

const TAGS = ["frontend", "traveling", "css"];

const router = getRouter(i18n.language);

interface Props {
  shouldShowBackButton?: boolean;
}

const {shouldShowBackButton} = Astro.props

---

<header
  class="section-container bg-white dark:bg-dark flex justify-between shadow-md"
>
  <span class="text-accent text-[36px] sm:text-[24px] font-secondary font-black">
    <HeaderLink href={router.home}>{SITE_TITLE}</HeaderLink>
  </span>

  <div class="right flex gap-[36px] items-center">
    <div class="tags flex gap-[12px]">
      {TAGS.map((tag) => <span class="font-semibold underline">#{tag}</span>)}
    </div>
    <div class="system-settings flex gap-[16px] items-center">
      <LanguageSwitcher />
      <ThemeIcon />
      {shouldShowBackButton && <span  class="back-button"><Fragment set:html={BackButton} /></span>}
    </div>
  </div>
</header>
<style lang="scss">
  header {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 10;
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    height: var(--header-height);
    transition: transform .3s;
    transition-timing-function: ease-in-out;

    @include bpMobile {
      padding: 12px;
    }
  }

  nav {
    width: 100%;
  }

  .tags {
    @include bpMobile {
      display: none;
    }
  }

  .back-button :global(svg) {
    width: 28px;
    height: 28px;
    color: black;
   
    @include bpMobile {
      width: 28px;
      height: 28px;
    }
  }
  
  :global(.dark) .back-button :global(svg) {
    color: white;
  }

</style>

<script is:inline >
  document.addEventListener("astro:after-swap", () => {
    const backButton = document.querySelector('.back-button');
      if (backButton) {
        backButton.addEventListener('click', () => { 
          window.history.back();
        })
      } 


      // 
      const headerNode = document.querySelector('header');
      let hasInitScrollHappened = false;

      setTimeout(() => {
        hasInitScrollHappened = true;
      }, 500)

      let lastScrollTop = null;
      document.addEventListener('scroll', () => {
        if (!hasInitScrollHappened) {
          lastScrollTop = window.scrollY;
          return;
        };

        if (window.scrollY > lastScrollTop) {
          headerNode.style.transform = 'translateY(-100%)';
        } else {
          headerNode.style.transform = '';
        }

        lastScrollTop = window.scrollY;
      })
  });
</script>

